 #- name: initialize the cluster
 # https://wiki.learnlinux.tv/index.php/How_to_build_your_own_Raspberry_Pi_Kubernetes_Cluster
 #  shell: kubeadm init --pod-network-cidr=192.168.0.0/16   >>/home/pi/cluster_setup.txt
 #  args:
 #    chdir: /home/pi
 #    creates: cluster_setup.txt

 - name: create .kube directory
   become_user: pi
   file:
     path: /home/pi/.kube
     state: directory
     mode: 0755

 - name: Check admin.conf file exists. # Here we execute admin.conf copy only when the k8s config file /etc/kubernetes/admin.conf exists.
   stat:
     path: /etc/kubernetes/admin.conf
   register: k8s_root_conf


# Set up config directory
 - name: copy admin.conf to user's kube config
   shell: sudo cp -i /etc/kubernetes/admin.conf  /home/pi/.kube/config
   when: k8s_root_conf.stat.exists == false

 - name: check if home/pi/.kube/config exists
   stat: 
     path: /home/pi/.kube/configs
   register: k8s_pi_kube_conf   


# from root to pi  
 - name: sudo chown $(id -u):$(id -g) /home/pi/.kube/config
   shell: sudo chown $(id -u):$(id -g) /home/pi/.kube/config
   when: k8s_pi_kube_conf.stat.exists == true

# deploy pod network  pretty quick  check with kubectl get pods -- all-namespace
 - name: install Pod network
   shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >>/home/pi/pod_network_setup.txt
   args:
      chdir: /home/pi
      creates: pod_network_setup.txt

# 
#      pi@k8s-head:~ $  kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#      podsecuritypolicy.policy/psp.flannel.unprivileged created
#      clusterrole.rbac.authorization.k8s.io/flannel created
#      clusterrolebinding.rbac.authorization.k8s.io/flannel created
#      serviceaccount/flannel created
#      configmap/kube-flannel-cfg created
#      daemonset.apps/kube-flannel-ds-amd64 created
#      daemonset.apps/kube-flannel-ds-arm64 created
#      daemonset.apps/kube-flannel-ds-arm created
#      daemonset.apps/kube-flannel-ds-ppc64le created
#      daemonset.apps/kube-flannel-ds-s390x created
#      everything below should be running  jeuh 
#      pi@k8s-head:~ $ kubectl get pods --all-namespaces
#      NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE
#      kube-system   coredns-66bff467f8-k5whf           1/1     Running   0          54m
#      kube-system   coredns-66bff467f8-wmk5z           1/1     Running   0          54m
#      kube-system   etcd-k8s-head                      1/1     Running   0          54m
#      kube-system   kube-apiserver-k8s-head            1/1     Running   0          54m
#      kube-system   kube-controller-manager-k8s-head   1/1     Running   0          54m
#      kube-system   kube-flannel-ds-arm-h4rk4          1/1     Running   0          2m12s
#      kube-system   kube-proxy-72tfd                   1/1     Running   0          54m
#      kube-system   kube-scheduler-k8s-head            1/1     Running   0          54m
             
#     run on each worker as super user
#     sudo kubeadm join 192.168.2.20:6443 --token cqjiyd.ztesuhchn7fsncyb  --discovery-token-ca-cert-hash sha256:9d9730535dc43de3593442085bf219d514a5c1421b10241142060a1acf206bf3

#     pi@k8s-worker-01:~ $ sudo kubeadm join 192.168.2.20:6443 --token cqjiyd.ztesuhchn7fsncyb     --discovery-token-ca-cert-hash sha256:9d9730535dc43de3593442085bf219d514a5c1421b10241142060a1acf206bf3
#     W0403 16:42:04.619886   18261 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
#     [preflight] Running pre-flight checks
# #     [preflight] Reading configuration from the cluster...
# #     [preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
# #     [kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.18" ConfigMap in the kube-system namespace
# #     [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
# #     [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
# #     [kubelet-start] Starting the kubelet
# #     [kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
# #     
# #     This node has joined the cluster:
# #     * Certificate signing request was sent to apiserver and a response was received.
# #     * The Kubelet was informed of the new secure connection details.
# #     
# #     Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
# #     pi@k8s-head:~ $ kubectl get nodes
# #     NAME            STATUS   ROLES    AGE   VERSION
# #     k8s-head        Ready    master   59m   v1.18.0
# #     k8s-worker-01   Ready    <none>   63s   v1.18.0
# 
# 
# pi@k8s-worker-03:~ $ sudo kubeadm join 192.168.2.20:6443 --token cqjiyd.ztesuhchn7fsncyb     --discovery-token-ca-cert-hash sha256:9d9730535dc43de3593442085bf219d514a5c1421b10241142060a1acf206bf3
# W0403 16:45:13.146856   18668 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
# [preflight] Running pre-flight checks
# [preflight] Reading configuration from the cluster...
# [preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
# [kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.18" ConfigMap in the kube-system namespace
# [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
# [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
# [kubelet-start] Starting the kubelet
# [kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
# 
# This node has joined the cluster:
# * Certificate signing request was sent to apiserver and a response was received.
# * The Kubelet was informed of the new secure connection details.
# 
# Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
# 
# pi@k8s-worker-03:~ $ exit
# logout
# Connection to 192.168.2.23 closed.
# boscp08@boscp08-dingo:~/.../raspberry_playbook_cluster_setup$ ssh pi@192.168.2.20
# Linux k8s-head 4.19.97-v7l+ #1294 SMP Thu Jan 30 13:21:14 GMT 2020 armv7l
# 
# The programs included with the Debian GNU/Linux system are free software;
# the exact distribution terms for each program are described in the
# individual files in /usr/share/doc/*/copyright.
# 
# Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
# permitted by applicable law.
# Last login: Fri Apr  3 16:43:22 2020 from 192.168.2.69

# pi@k8s-head:~ $ kubectl get nodes
# NAME            STATUS     ROLES    AGE     VERSION
# k8s-head        Ready      master   63m     v1.18.0
# k8s-worker-01   Ready      <none>   5m6s    v1.18.0
# k8s-worker-02   Ready      <none>   2m42s   v1.18.0
# k8s-worker-03   NotReady   <none>   111s    v1.18.0
# pi@k8s-head:~ $ kubectl get nodes

# NAME            STATUS   ROLES    AGE     VERSION
# k8s-head        Ready    master   65m     v1.18.0
# k8s-worker-01   Ready    <none>   6m48s   v1.18.0
# k8s-worker-02   Ready    <none>   4m24s   v1.18.0
# k8s-worker-03   Ready    <none>   3m33s   v1.18.0
# 