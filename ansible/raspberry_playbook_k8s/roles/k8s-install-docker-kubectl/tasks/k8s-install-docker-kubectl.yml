#install Docker
  - name: install docker 
    shell: curl -sSL get.docker.com | sh
 
  - name: usermod -aG docker pi 
    shell: usermod -aG docker pi
       
  - name: create file /etc/docker/daemon.json
    copy:
      dest: "/etc/docker/daemon.json"
      content: |
             {
                  "exec-opts": ["native.cgroupdriver=systemd"],
                  "log-driver": "json-file",
                  "log-opts": {
                    "max-size": "100m"
                  },
                  "storage-driver": "overlay2"
                }
  - name: Edit /etc/sysctl.conf enable port forwarding
    replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: "net.ipv4.ip_forward=1"  


##REBOOT
#  - name: Reboot
#    become: True
#    shell: "sleep 1 && shutdown -r now +1"
#    async: 1
#    poll: 0
#    notify:
#        - wait-for-reboot
#    when: REBOOT == True
#
 

# install KUBECTL KUBELET and KUBEADM

            
  - name: create file /etc/apt/sources.list.d/kubernetes.list
    copy:
      dest: "/etc/apt/sources.list.d/kubernetes.list"
      content: deb http://apt.kubernetes.io/ kubernetes-xenial main

  - name: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    shell:  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# so far so good    
  - name:  Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    when: UPDATE == True

# to be sure according to jay
  - name:  Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    when: UPDATE == True

#  all three in one shot 
  - name: Install Kubernetes binaries
    apt: 
       name: "{{ packages }}"
       state: present
       update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

#REBOOT give them a moment to get up
  - name: Reboot
    become: True
    shell: "sleep 1 && shutdown -r now +1"
    async: 1
    poll: 0
    notify:
       - wait-for-reboot
    when: REBOOT == True

# hope the run will be okay
# next pod and service network 

