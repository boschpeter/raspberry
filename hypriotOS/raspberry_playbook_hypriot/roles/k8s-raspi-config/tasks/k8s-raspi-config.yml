---
   #    Run with: ansible-playbook -i hosts raspi-config.yml Don't forget to touch ssh in the SD /boot partitions! 
   #    ssh-keygen -R 192.168.2.30   
   #    ssh-copy-id -i ~/.ssh/id_rsa.pub pi@192.168.2.30

#Update
    - name: Update raspi-config itself
      become: true
      apt: name=raspi-config update_cache=yes state=present cache_valid_time=3600
      when: UPDATE == True

#Get some basic info
    - name: Get Raspberry Pi type
      shell: "raspi-config nonint get_pi_type"
      register: pi_type
      changed_when: False

    - name: Show pi version
      debug:
        msg: "Pi version: {{ pi_type.stdout }}"

#1 Change user password

    # ansible-vault and user module ??
    - name: Change user password
      shell: "(echo '{{ NEWPASSWORD }}' ; echo '{{ NEWPASSWORD }}') | passwd {{ USER }}"

#2 Network Options

    #N1 Hostname
    - name: Get hostname
      shell: "raspi-config nonint get_hostname"
      register: pi_hostname
      changed_when: False

    - name: Print current hostname
      debug:
        msg: "Current hostname: {{ pi_hostname.stdout }}"

    #- name: Change hostname
    #  shell: "raspi-config nonint do_hostname {{ HOSTNAME }}"
    #  when: pi_hostname.stdout != HOSTNAME

    #N2 Wi-fi
    - name: Set WiFi credentials
      shell: "raspi-config nonint do_wifi_ssid_passphrase {{ SSID }} {{ PASSPHRASE }}"
    
    #N3 Network interface names
    - name: Get network names status
      shell: "raspi-config nonint get_net_names"
      register: pi_netnames
      changed_when: False

    - name: Print current network names status
      debug:
        msg: "Current network names status: {{ pi_netnames.stdout }}"

    - name: Enable network names
      shell: "raspi-config nonint do_net_names 0"
      when: (NETNAMES == True) and (pi_netnames.stdout != '0')

    - name: Disable network names
      shell: "raspi-config nonint do_net_names 1"
      when: (NETNAMES == True) and (pi_netnames.stdout != '1')

#3 Boot Options

    #B1 Desktop / CLI
    - name: Get boot CLI
      shell: "raspi-config nonint get_boot_cli"
      register: boot_cli
      changed_when: False

    - name: Print boot CLI
      debug: 
        msg: "Boot CLI is: {{ boot_cli.stdout }}"

    - name: Get boot autologin
      shell: "raspi-config nonint get_autologin"
      register: auto_login
      changed_when: False

    - name: Print boot autologin status
      debug: 
        msg: "Boot autologin is: {{ auto_login.stdout }}"

    #B1 cli, B2 cli autologin, B3 desktop, B4 desktop autologin
    - name: Set Boot behaviour
      shell: "raspi-config nonint do_boot_behaviour {{ BOOTBEHAVIOUR }}"

    #B2 Wait for Network at Boot
    - name: Get boot wait for network status
      shell: "raspi-config nonint get_boot_wait"
      register: boot_wait
      changed_when: False

    - name: Print boot wait for network status
      debug: 
        msg: "Boot wait is: {{ boot_wait.stdout }}"

      #- name: Set boot wait network status
      #shell: "raspi-config nonint do_boot_wait {{ BOOTWAIT }}"

    #B3 Splash Screen
    - name: Get splash status
      shell: "raspi-config nonint get_boot_splash"
      register: boot_splash
      changed_when: False

    - name: Print boot splash status
      debug: 
        msg: "Boot splash status is: {{ boot_splash.stdout }}"

      #- name: Set boot splash
      #shell: "raspi-config nonint do_boot_splash {{ BOOTSPLASH }}"

#4 Localisation Options

    #I1 Change Locale
    - name: Change locale
      shell: "raspi-config nonint do_change_locale {{ LOCALE }}"

    #I2 Change Timezone
    - name: Change timezone
      shell: "raspi-config nonint do_change_timezone {{ TIMEZONE }}"

    #I3 Change Keyboard Layout
    - name: Change keyboard layout
      shell: "raspi-config nonint do_configure_keyboard {{ XKBLAYOUT }}"

   
   #I4 Change Wi-fi Country
    - name: Get WiFi country
      shell: "raspi-config nonint do_wifi_country {{ WIFI_COUNTRY }}" 
      register: wifi_country
      changed_when: False
      ignore_errors: True #to avoid error when WiFi is not present

    #I4 Change Wi-fi Country
    #- name: Get WiFi country
    #  shell: "raspi-config nonint get_wifi_country"
    #  register: wifi_country
    #  changed_when: False
    #  ignore_errors: True #to avoid error when WiFi is not present
      
    - name: Print current WiFi country
      debug: 
        msg: "Wifi country is: {{ wifi_country.stdout }}" 

    #- name: Set WiFi country
    #shell: "raspi-config nonint do_wifi_country {{ WIFI_COUNTRY }}"

#5 Interfacing Options
        
      #P2 SSH
    - name: Check if SSH is enabled or not
      shell: "raspi-config nonint get_ssh"
      register: ssh_status
      changed_when: False

    - name: Print SSH status
      debug: 
        msg: "SSH status is: {{ ssh_status.stdout }}"

    - name: Enable SSH
      shell: "raspi-config nonint do_ssh 0"
      when: (SSH == True) and (ssh_status.stdout != '0')

    - name: Disable SSH
      shell: "raspi-config nonint do_ssh 1"
      when: (SSH == False) and (ssh_status.stdout != '1')

    
#7 Advanced Options 

    #A1 Expand Filesystem
    - name: Check if FS is expandable
      shell: "raspi-config nonint get_can_expand"
      register: fs_filled
      changed_when: False

    - name: Print if FS is expandable or not
      debug:
        msg: "Filesystem is expandable! [{{ fs_filled.stdout }}]"
      when: fs_filled.stdout == '0'

    - name: Expand Filesystem
      shell: "raspi-config nonint do_expand_rootfs"

    #A2 Overscan
    - name: Get Overscan status
      shell: "raspi-config nonint get_overscan"
      register: pi_overscan
      changed_when: False

    - name: Print Overscan
      debug: 
        msg: "Boot overscan is: {{ pi_overscan.stdout }}"

    - name: Enable Overscan
      shell: "raspi-config nonint do_overscan {{ OVERSCAN }}"
      when: OVERSCAN == True

    #A3 Memory Split
    - name: Get current GPU memory split (1/4)
      shell: "raspi-config nonint get_config_var gpu_mem /boot/config.txt"
      register: gpu_mem
      changed_when: False

    - name: Get current GPU memory split 256 (2/4)
      shell: "raspi-config nonint get_config_var gpu_mem_256 /boot/config.txt"
      register: gpu_mem_256
      changed_when: False

    - name: Get current GPU memory split 512 (3/4)
      shell: "raspi-config nonint get_config_var gpu_mem_512 /boot/config.txt"
      register: gpu_mem_512
      changed_when: False

    - name: Get current GPU memory split 1024 (4/4)
      shell: "raspi-config nonint get_config_var gpu_mem_1024 /boot/config.txt"
      register: gpu_mem_1k
      changed_when: False

    - name: Print current GPU memory split
      debug:
        msg: "Current GPU memory split: {{ gpu_mem.stdout }} - {{ gpu_mem_256.stdout }} - {{ gpu_mem_512.stdout }} - {{ gpu_mem_1k.stdout }}"

    - name: Set GPU memory split
      shell: "raspi-config nonint do_memory_split {{ MEMSPLIT }}"
      #when: gpu_mem.stdout != MEMSPLIT

    #A4 Audio
    ### 0 Auto, 1 Force 3.5mm, 2 Force hdmi
    - name: Set audio out
      shell: "raspi-config nonint do_audio {{ AUDIO_OUT }}"
    
    #A5 Resolution
    - name: Get HDMI group
      shell: "raspi-config nonint get_config_var hdmi_group /boot/config.txt"
      register: hdmi_group
      changed_when: False

    - name: Get HDMI mode
      shell: "raspi-config nonint get_config_var hdmi_mode /boot/config.txt"
      register: hdmi_mode
      changed_when: False

    - name: Print HDMI group & mode
      debug: 
        msg: "HDMI group and mode is: {{ hdmi_group.stdout }} - {{ hdmi_mode.stdout }}"

      #- name: Set HDMI group mode
      #shell: "raspi-config nonint do_resolution {{ HDMI_GROUP }} {{ HDMI_MOD }}"

    #A6 Pixel Doubling
    - name: Get pixel doubling
      shell: "raspi-config nonint get_pixdub"
      register: pixdub_status
      changed_when: False

    - name: Print pixel doubling status
      debug: 
        msg: "Pixel Doubling is: {{ pixdub_status.stdout }}"

    - name: Enable pixel doubling
      shell: "raspi-config nonint do_pixdub 0"
      when: (PIXDUB == True) and (pixdub_status.stdout != '0')

    - name: Disable pixel doubling
      shell: "raspi-config nonint do_onewire 1"
      when: (PIXDUB == False) and (pixdub_status.stdout != '1')

    #A7 GL Driver
    #- name: Set OpenGL desktop driver
    #shell: "raspi-config nonint do_gldriver {{ GLDRIVER }}"

#8 Update
    #^^^Look at the top^^^

    - name: Edit /boot/cmndline.txt and add
      replace:
        path: /boot/cmdline.txt
        regexp: 'rootwait'
        replace: "rootwait cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory"   

# Disable Swap file       
#   sudo dphys-swapfile swapoff && \
#   sudo dphys-swapfile uninstall && \
#   sudo systemctl disable dphys-swapfile
#   # Check if it went well after reboot
#    free

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2) check with free -m
      shell: dphys-swapfile swapoff &&  dphys-swapfile uninstall &&  systemctl disable dphys-swapfile

#Update

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day

    #- name: Python-minimal installed on the target server. Command to setup
    #  shell: apt install python-minimal

    #- name:  Custom SSH port on the server, as port 22 will be exposed outside.  
    #  replace:
    #    path: /etc/ssh/ssh_config
    #    regexp: '#   Port 22'
    #    replace: "port 7799"   

#    - name: ansible remove directory /home/pi
#      file:
#          path: /home/pi/socialcoin-api
#          state: absent
#  
#    - name: Create Project Directory /home/pi
#      file: path=/home/boscp08/socialcoin-api state=directory


    - name: Install package git
      apt:
        name:
        - git
        state: latest
        cache_valid_time: 3600    # update cache if more than an hour old


        
#REBOOT
    - name: Reboot
      become: True
      shell: "sleep 1 && shutdown -r now +1"
      async: 1
      poll: 0
      notify:
       - wait-for-reboot
      when: REBOOT == True


  
           #/* Command strings */
           #define GET_CAN_EXPAND  "sudo raspi-config nonint get_can_expand"
           #define EXPAND_FS       "sudo raspi-config nonint do_expand_rootfs"
           #define GET_HOSTNAME    "sudo raspi-config nonint get_hostname"
           #define SET_HOSTNAME    "sudo raspi-config nonint do_hostname %s"
           #define GET_BOOT_CLI    "sudo raspi-config nonint get_boot_cli"
           #define GET_AUTOLOGIN   "sudo raspi-config nonint get_autologin"
           #define SET_BOOT_CLI    "sudo raspi-config nonint do_boot_behaviour B1"
           #define SET_BOOT_CLIA   "sudo raspi-config nonint do_boot_behaviour B2"
           #define SET_BOOT_GUI    "sudo raspi-config nonint do_boot_behaviour B3"
           #define SET_BOOT_GUIA   "sudo raspi-config nonint do_boot_behaviour B4"
           #define GET_BOOT_WAIT   "sudo raspi-config nonint get_boot_wait"
           #define SET_BOOT_WAIT   "sudo raspi-config nonint do_boot_wait %d"
           #define GET_SPLASH      "sudo raspi-config nonint get_boot_splash"
           #define SET_SPLASH      "sudo raspi-config nonint do_boot_splash %d"
           #define GET_OVERSCAN    "sudo raspi-config nonint get_overscan"
           #define SET_OVERSCAN    "sudo raspi-config nonint do_overscan %d"
           #define GET_CAMERA      "sudo raspi-config nonint get_camera"
           #define SET_CAMERA      "sudo raspi-config nonint do_camera %d"
           #define GET_SSH         "sudo raspi-config nonint get_ssh"
           #define SET_SSH         "sudo raspi-config nonint do_ssh %d"
           #define GET_VNC         "sudo raspi-config nonint get_vnc"
           #define SET_VNC         "sudo raspi-config nonint do_vnc %d"
           #define GET_SPI         "sudo raspi-config nonint get_spi"
           #define SET_SPI         "sudo raspi-config nonint do_spi %d"
           #define GET_I2C         "sudo raspi-config nonint get_i2c"
           #define SET_I2C         "sudo raspi-config nonint do_i2c %d"
           #define GET_SERIAL      "sudo raspi-config nonint get_serial"
           #define GET_SERIALHW    "sudo raspi-config nonint get_serial_hw"
           #define SET_SERIAL      "sudo raspi-config nonint do_serial %d"
           #define GET_1WIRE       "sudo raspi-config nonint get_onewire"
           #define SET_1WIRE       "sudo raspi-config nonint do_onewire %d"
           #define GET_RGPIO       "sudo raspi-config nonint get_rgpio"
           #define SET_RGPIO       "sudo raspi-config nonint do_rgpio %d"
           #define GET_PI_TYPE     "sudo raspi-config nonint get_pi_type"
           #define GET_OVERCLOCK   "sudo raspi-config nonint get_config_var arm_freq /boot/config.txt"
           #define SET_OVERCLOCK   "sudo raspi-config nonint do_overclock %s"
           #define GET_GPU_MEM     "sudo raspi-config nonint get_config_var gpu_mem /boot/config.txt"
           #define GET_GPU_MEM_256 "sudo raspi-config nonint get_config_var gpu_mem_256 /boot/config.txt"
           #define GET_GPU_MEM_512 "sudo raspi-config nonint get_config_var gpu_mem_512 /boot/config.txt"
           #define GET_GPU_MEM_1K  "sudo raspi-config nonint get_config_var gpu_mem_1024 /boot/config.txt"
           #define SET_GPU_MEM     "sudo raspi-config nonint do_memory_split %d"
           #define GET_HDMI_GROUP  "sudo raspi-config nonint get_config_var hdmi_group /boot/config.txt"
           #define GET_HDMI_MODE   "sudo raspi-config nonint get_config_var hdmi_mode /boot/config.txt"
           #define SET_HDMI_GP_MOD "sudo raspi-config nonint do_resolution %d %d"
           #define GET_WIFI_CTRY   "sudo raspi-config nonint get_wifi_country"
           #define SET_WIFI_CTRY   "sudo raspi-config nonint do_wifi_country %s"
           #define CHANGE_PASSWD   "(echo \"%s\" ; echo \"%s\" ; echo \"%s\") | passwd"        